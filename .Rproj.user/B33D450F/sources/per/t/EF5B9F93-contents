### A Harkey
### 3-14-2020
### ETR1 RNA-Seq DESeq2 analysis

# Goal of this script: Analyze ETR1 RNA-Seq data from count data to DE genes,
# including multiple comparisons (location batch effects, hormone effects, and looking for ETR1-(in)dependent genes)
# For more information, see project notebook

##### Load packages #####
library(DESeq2)
library(ashr)
library(ComplexHeatmap)
library(ggplot2)
library(tidyr)
library(ggpubr)
library(reshape2)
library(gridtext)

##### Set file locations #####
# Location of counts file
ctfile <- "G:/Shared drives/Ethylene RNA Seq experiments/Data - DO NOT EDIT FILES/STAR_MappingMode_Raw_Gene_Counts/salmon_counts_022520.txt"

# Location of sample information file
sifile <- "G:/Shared drives/Ethylene RNA Seq experiments/metadata/contrastdata.csv"

# Location to save CSV files
csvsave <- "G:/Shared drives/Ethylene RNA Seq experiments/Data - DO NOT EDIT FILES/DESeq2/07 expanded criteria for ETR1 dependence/"

# Location to save PNG files
pngsave <- "G:/My Drive/WFU/02 Papers/2020 RNA-Seq/Figures/01 Raw images/07 expanded criteria for ETR1 dependence/"

##### Set global options - general #####
# p value cutoff
pcut <- 0.01

# logFC cutoff
lfccut <- 0.5

# baseMean cutoff
bmcut <- 10

##### Set global options - heatmaps #####
# Color function for heatmaps
# Set scale
txtsize <- 1.5

scale <- seq(-2.5, 2.5, 0.01)
# Generate color function
colfunc <- colorRampPalette(c("blue", "white", "red"))
colfunc <- circlize::colorRamp2(scale, colfunc(length(scale)))

# Generate larger legend to add in Illustrator
# png(paste0(pngsave, "legend.png"), width = 100, height = 200)
# draw(Legend(col_fun = colfunc,
#             title = "logFC",
#             legend_height = unit(40, "mm"),
#             grid_width = unit(10, "mm"),
#             labels_gp = gpar(cex = 1.5),
#             title_gp = gpar(cex = 1.5),
#             title_gap = unit(3, "mm")
#             ))
# dev.off()

# Labels for bottom of heatmaps with all samples
anno <- columnAnnotation(time = anno_mark(at = c(1:21),
                                          as.character(rep(c(0, 1, 4, 24, 1, 4, 24), 3)),
                                          labels_rot = 0,
                                          labels_gp = gpar(cex = txtsize),
                                          link_height = unit(5, "mm"),
                                          link_gp = gpar(col = "white")),
                         treatcol = c("control", rep("ethylene", 3), rep("ACC", 3), 
                                      "control", rep("ethylene", 3), rep("ACC", 3), 
                                      "control", rep("ethylene", 3), rep("ACC", 3)),
                         treat = anno_mark(at = c(3, 6, 10, 13, 17, 20),
                                           labels = rep(c("ethylene", "ACC"), 3),
                                           labels_rot = 0,
                                           labels_gp = gpar(cex = txtsize),
                                           link_height = unit(4, "mm"),
                                           link_gp = gpar(col = "white")),
                         genocol = c(rep("Col-0", 7), rep("etr1-3", 7), rep("etr1-7", 7)),
                         geno = anno_mark(at = c(4, 11, 18),
                                          labels = gt_render(c("Col-0", "*etr1-3*",
                                                             "*etr1-7*")),
                                          labels_rot = 0,
                                          labels_gp = gpar(cex = 1.3),
                                          link_height = unit(2, "mm"),
                                          link_gp = gpar(col = "white")),
                         col = list(treatcol = c("control" = "white",
                                                 "ACC" = "black",
                                                 "ethylene" = "grey"),
                                    genocol = c("Col-0" = "black",
                                                "etr1-3" = "grey",
                                                "etr1-7" = "black")),
                         simple_anno_size = unit(2, "mm"),
                         show_legend = FALSE,
                         show_annotation_name = FALSE
                         )

# Labels for bottom of heatmaps - ACC vs. ethylene
anno.treat <- columnAnnotation(time = anno_mark(at = c(1:6),
                                                as.character(rep(c(1, 4, 24), 2)),
                                                labels_rot = 0,
                                                labels_gp = gpar(cex = txtsize),
                                                link_height = unit(2, "mm"),
                                                link_gp = gpar(col = "white")),
                               treatcol = c(rep("ethylene", 3), rep("ACC", 3)),
                               treat = anno_mark(at = c(2, 5),
                                                 labels = c("ethylene", "ACC"),
                                                 labels_rot = 0,
                                                 labels_gp = gpar(cex = txtsize),
                                                 link_height = unit(4, "mm"),
                                                 link_gp = gpar(col = "white")),
                               col = list(treatcol = c("ACC" = "black",
                                                       "ethylene" = "grey")),
                               simple_anno_size = unit(2, "mm"),
                               show_legend = FALSE,
                               show_annotation_name = FALSE
                               )

#

##### Load custom functions #####
# Useful functions for summarizing what genes are doing across multiple samples:
# Given logFC & pvalue and cutoffs for both values, output is U for genes with significant positive logFC, D for genes with significant negative logFC, and n for genes with non-significant results
upordown <- function(pval, lfc, pcut, lfccut)
{if(pval < pcut & abs(lfc) > lfccut)
{if(lfc > 0)
{out <- "U"}
  else
  {out <- "D"}}
  else
  {out <- "n"}
  return(out)}

# Given a range of values, which value has the largest absolute value
maxabs <- function(a)
{if(max(a) > abs(min(a)))
{b <- max(a)}
  else
  {b <- min(a)}
  return(b)}

# Takes output from DESeq2 and removes redundant/unnecessary columns
# text option will remove any additional text from all column labels containing it (such as a prefix or suffix)
simpleout <- function(a, txt)
{
  b <- a[,-c(grep("pval", colnames(a)), grep("lfcSE", colnames(a)))]
  colnames(b)[grep("baseMean", colnames(b))][1] <- "baseMean"
  b <- b[,-grep("baseMean", colnames(b))[-1]]
  colnames(b) <- gsub("log2FoldChange", "logFC", colnames(b))
  if(missing(txt))
  {}
  else
  {colnames(b) <- gsub(txt, "", colnames(b))}
  return(b)
}

##### Prepare data #####
# Read in both files
cts <- as.matrix(read.table(ctfile))
coldata <- read.csv(sifile, row.names = 1)

# Re-order cts columns to match coldata rownames
cts <- cts[, rownames(coldata)]

# Order factor levels
coldata$time <- factor(coldata$time)

# Round count numbers
cts <- as.matrix(round(cts, 0))

# Remove bad Col-0 control
# This sample had a low concentration of RNA compared to the others,
# and did not cluster with the other controls in PCA analysis
cts <- cts[,-39]
coldata <- coldata[-39,]

# Calculate IQRs
iqrs <- NA
for(i in 1:nrow(cts))
{
  iqrs[i] <- IQR(cts[i,])
}

# Remove genes with IQR less than 5
cts <- cts[which(iqrs > 5),]

##### Run DESeq - lab locations separate #####
# Create new factor for all variables
coldata$multi <- paste(coldata$lab, coldata$geno, coldata$time, sep = ".")

# Order factor levels
coldata$multi <- factor(coldata$multi)

# Build DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = cts,
                              colData = coldata,
                              design = ~ multi)

# DESeq filtering
dds <- DESeq(dds)

##### Compare controls between labs #####
# Note: using shrinkage method "ashr" because this is the only way to specify multiple contrasts with different denominators without releveling the factor and re-running nBinomWaldTest every time.
# This method was recommended by Michael Love, creator of DESeq2, in response to a question I asked on the Bioconductor support site: https://support.bioconductor.org/p/129056/

# For all, use Muday as denominator
lab.col0 <- lfcShrink(dds,
                      res = results(dds,
                                    alpha = 0.01,
                                    contrast = c("multi", "binder.Col0.0", "muday.Col0.0")),
                      contrast = c("multi", "binder.Col0.0", "muday.Col0.0"),
                      type = "ashr")

lab.etr13 <- lfcShrink(dds,
                       res = results(dds,
                                     alpha = 0.01,
                                     contrast = c("multi", "binder.etr13.0", "muday.etr13.0")),
                       contrast = c("multi", "binder.etr13.0", "muday.etr13.0"),
                       type = "ashr")
lab.etr17 <- lfcShrink(dds,
                       res = results(dds,
                                     alpha = 0.01,
                                     contrast = c("multi", "binder.etr17.0", "muday.etr17.0")),
                       contrast = c("multi", "binder.etr17.0", "muday.etr17.0"),
                       type = "ashr")

# Combine all pairwise comparison results into one dataframe
## Give columns unique names
colnames(lab.col0) <- paste("lab.col0", colnames(lab.col0), sep = ".")
colnames(lab.etr13) <- paste("lab.etr13", colnames(lab.etr13), sep = ".")
colnames(lab.etr17) <- paste("lab.etr17", colnames(lab.etr17), sep = ".")

## Combine by gene IDs
lab.col0$genes <- rownames(lab.col0)
lab.etr13$genes <- rownames(lab.etr13)
lab.etr17$genes <- rownames(lab.etr17)

labcomparisons <- plyr::join_all(lapply(list(lab.col0,
                                             lab.etr13,
                                             lab.etr17), as.data.frame), by = "genes")

rownames(labcomparisons) <- labcomparisons$genes
labcomparisons <- labcomparisons[,-6]

labcompsig <- labcomparisons[which((labcomparisons$lab.col0.padj <= pcut & abs(labcomparisons$lab.col0.log2FoldChange) >= lfccut) |
                                     (labcomparisons$lab.etr13.padj <= pcut & abs(labcomparisons$lab.etr13.log2FoldChange) >= lfccut) |
                                     (labcomparisons$lab.etr17.padj <= pcut & abs(labcomparisons$lab.etr17.log2FoldChange) >= lfccut)
),]

labcompsig[-which(labcompsig$lab.col0.baseMean <= bmcut),]

labcompsimp <- simpleout(labcompsig, "lab.")

write.csv(labcomparisons, paste0(csvsave, "labcomparisons - without bad Col0 - all results.csv"))
write.csv(labcompsig, paste0(csvsave, "labcomparisons - without bad Col0 - sig results.csv"))
write.csv(labcompsimp, paste0(csvsave, "labcomparisons - without bad Col0 - sig results - simplified.csv"))

length(which(labcompsimp$col0.padj <= pcut & abs(labcompsimp$col0.logFC) >= lfccut))
length(which(labcompsimp$etr13.padj <= pcut & abs(labcompsimp$etr13.logFC) >= lfccut))
length(which(labcompsimp$etr17.padj <= pcut & abs(labcompsimp$etr17.logFC) >= lfccut))

##### Run DESeq - with controls from both labs combined #####
# Create new factor for all variables
coldata$multi <- paste(coldata$geno, coldata$treat, coldata$time, sep = ".")

# Order factor levels
coldata$multi <- factor(coldata$multi)
coldata$multi <- relevel(coldata$multi, "Col0.cont.0")

# Build DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = cts,
                              colData = coldata,
                              design = ~ multi)

# DESeq filtering
dds <- DESeq(dds)
##### Compare controls between genotype #####
etr13.col0.0 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.cont.0", "Col0.cont.0")),
                          contrast = c("multi", "etr13.cont.0", "Col0.cont.0"),
                          type = "ashr")

etr17.col0.0 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.cont.0", "Col0.cont.0")),
                          contrast = c("multi", "etr17.cont.0", "Col0.cont.0"),
                          type = "ashr")

# Gave convergence warning
etr17.etr13.0 <- lfcShrink(dds,
                           res = results(dds,
                                         alpha = 0.01,
                                         contrast = c("multi", "etr17.cont.0", "etr13.cont.0")),
                           contrast = c("multi", "etr17.cont.0", "etr13.cont.cont.0"),
                           type = "ashr")


# Combine all pairwise comparison results into one dataframe
## Give columns unique names
colnames(etr13.col0.0) <- paste("etr13vscol0.0", colnames(etr13.col0.0), sep = ".")
colnames(etr17.col0.0) <- paste("etr17vscol0.0", colnames(etr17.col0.0), sep = ".")
colnames(etr17.etr13.0) <- paste("etr17vsetr13.0", colnames(etr17.etr13.0), sep = ".")

## Combine by gene IDs
etr13.col0.0$genes <- rownames(etr13.col0.0)
etr17.col0.0$genes <- rownames(etr17.col0.0)
etr17.etr13.0$genes <- rownames(etr17.etr13.0)

genocomparisons <- plyr::join_all(lapply(list(etr13.col0.0,
                                              etr17.col0.0,
                                              etr17.etr13.0),
                                         as.data.frame), by = "genes")

rownames(genocomparisons) <- genocomparisons$genes
genocomparisons <- genocomparisons[,-6]

genosig <- genocomparisons[which((genocomparisons$etr13vscol0.0.padj <= pcut & abs(genocomparisons$etr13vscol0.0.log2FoldChange) >= lfccut) |
                                   (genocomparisons$etr17vscol0.0.padj <= pcut & abs(genocomparisons$etr17vscol0.0.log2FoldChange) >= lfccut) |
                                   (genocomparisons$etr17vsetr13.0.padj <= pcut & abs(genocomparisons$etr17vsetr13.0.log2FoldChange) >= lfccut)),]

# Check baseMeans
# hist(genosig$etr13vscol0.0.baseMean,
#      breaks = 1e5,
#      xlim = c(0, 20))
# There aren't a ton of genes with baseMean less than 10, but we can filter these out

genosig <- genosig[which(genosig$etr13vscol0.0.baseMean > bmcut),]

genosimp <- simpleout(genosig)

write.csv(genocomparisons, paste0(csvsave, "genotype comparisons - all results.csv"))
write.csv(genosig, paste0(csvsave, "genotype comparisons - sig results.csv"))
write.csv(genosimp, paste0(csvsave, "genotype comparisons - sig results - simplified.csv"))

length(which(genosig$etr13vscol0.0.padj <= pcut & abs(genosig$etr13vscol0.0.log2FoldChange) >= lfccut))
length(which(genosig$etr17vscol0.0.padj <= pcut & abs(genosig$etr17vscol0.0.log2FoldChange) >= lfccut))
length(which(genosig$etr17vsetr13.0.padj <= pcut & abs(genosig$etr17vsetr13.0.log2FoldChange) >= lfccut))

length(which(genosig$etr17vscol0.0.padj <= pcut
             & abs(genosig$etr17vscol0.0.log2FoldChange) >= lfccut
             & genosig$etr17vsetr13.0.padj <= pcut
             & abs(genosig$etr17vsetr13.0.log2FoldChange) >= lfccut
             ))

##### Heatmap - Geno comparisons #####
genosig <- read.csv(paste0(csvsave, "genotype comparisons - sig results - simplified.csv"), row.names = 1)

genoht <- as.matrix(genosig[,grep("logFC", colnames(genosig))])

png(paste0(pngsave, "genotype comparisons.png"), width = 450, height = 600)
Heatmap(genoht,
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        column_labels = c("etr1-3 vs. Col-0", "etr1-7 vs. Col-0", "etr1-7 vs. etr1-3"),
        column_names_rot = 30,
        column_names_gp = gpar(cex = 1.5),
        column_names_centered = TRUE,
        col = colfunc
        )
dev.off()

##### Time point comparisons mutants to self controls #####
# etr1-7 ethylene comparisons
etr17.eth.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.eth.1", "etr17.cont.0")),
                          contrast = c("multi", "etr17.eth.1", "etr17.cont.0"),
                          type = "ashr")

etr17.eth.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.eth.4", "etr17.cont.0")),
                          contrast = c("multi", "etr17.eth.4", "etr17.cont.0"),
                          type = "ashr")

etr17.eth.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.eth.24", "etr17.cont.0")),
                          contrast = c("multi", "etr17.eth.24", "etr17.cont.0"),
                          type = "ashr")

# etr1-7 ACC comparisons
etr17.acc.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.acc.1", "etr17.cont.0")),
                          contrast = c("multi", "etr17.acc.1", "etr17.cont.0"),
                          type = "ashr")

etr17.acc.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.acc.4", "etr17.cont.0")),
                          contrast = c("multi", "etr17.acc.4", "etr17.cont.0"),
                          type = "ashr")

etr17.acc.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.acc.24", "etr17.cont.0")),
                          contrast = c("multi", "etr17.acc.24", "etr17.cont.0"),
                          type = "ashr")

# etr1-3 ethylene comparisons
etr13.eth.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.eth.1", "etr13.cont.0")),
                          contrast = c("multi", "etr13.eth.1", "etr13.cont.0"),
                          type = "ashr")

etr13.eth.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.eth.4", "etr13.cont.0")),
                          contrast = c("multi", "etr13.eth.4", "etr13.cont.0"),
                          type = "ashr")

etr13.eth.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.eth.24", "etr13.cont.0")),
                          contrast = c("multi", "etr13.eth.24", "etr13.cont.0"),
                          type = "ashr")

# etr1-3 ACC comparisons
etr13.acc.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.acc.1", "etr13.cont.0")),
                          contrast = c("multi", "etr13.acc.1", "etr13.cont.0"),
                          type = "ashr")

etr13.acc.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.acc.4", "etr13.cont.0")),
                          contrast = c("multi", "etr13.acc.4", "etr13.cont.0"),
                          type = "ashr")

etr13.acc.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.acc.24", "etr13.cont.0")),
                          contrast = c("multi", "etr13.acc.24", "etr13.cont.0"),
                          type = "ashr")

# Combine all pairwise comparison results into one dataframe
## Give columns unique names
colnames(etr17.eth.01) <- paste("etr17.eth.01", colnames(etr17.eth.01), sep = ".")
colnames(etr17.eth.04) <- paste("etr17.eth.04", colnames(etr17.eth.04), sep = ".")
colnames(etr17.eth.24) <- paste("etr17.eth.24", colnames(etr17.eth.24), sep = ".")

colnames(etr17.acc.01) <- paste("etr17.acc.01", colnames(etr17.acc.01), sep = ".")
colnames(etr17.acc.04) <- paste("etr17.acc.04", colnames(etr17.acc.04), sep = ".")
colnames(etr17.acc.24) <- paste("etr17.acc.24", colnames(etr17.acc.24), sep = ".")

colnames(etr13.eth.01) <- paste("etr13.eth.01", colnames(etr13.eth.01), sep = ".")
colnames(etr13.eth.04) <- paste("etr13.eth.04", colnames(etr13.eth.04), sep = ".")
colnames(etr13.eth.24) <- paste("etr13.eth.24", colnames(etr13.eth.24), sep = ".")

colnames(etr13.acc.01) <- paste("etr13.acc.01", colnames(etr13.acc.01), sep = ".")
colnames(etr13.acc.04) <- paste("etr13.acc.04", colnames(etr13.acc.04), sep = ".")
colnames(etr13.acc.24) <- paste("etr13.acc.24", colnames(etr13.acc.24), sep = ".")

## Combine by gene IDs
etr17.eth.01$genes <- rownames(etr17.eth.01)
etr17.eth.04$genes <- rownames(etr17.eth.04)
etr17.eth.24$genes <- rownames(etr17.eth.24)
etr17.acc.01$genes <- rownames(etr17.acc.01)
etr17.acc.04$genes <- rownames(etr17.acc.04)
etr17.acc.24$genes <- rownames(etr17.acc.24)
etr13.eth.01$genes <- rownames(etr13.eth.01)
etr13.eth.04$genes <- rownames(etr13.eth.04)
etr13.eth.24$genes <- rownames(etr13.eth.24)
etr13.acc.01$genes <- rownames(etr13.acc.01)
etr13.acc.04$genes <- rownames(etr13.acc.04)
etr13.acc.24$genes <- rownames(etr13.acc.24)

selfcontrolres <- plyr::join_all(lapply(list(
  etr17.eth.01,
  etr17.eth.04,
  etr17.eth.24,
  etr17.acc.01,
  etr17.acc.04,
  etr17.acc.24,
  etr13.eth.01,
  etr13.eth.04,
  etr13.eth.24,
  etr13.acc.01,
  etr13.acc.04,
  etr13.acc.24), as.data.frame), by = "genes")

rownames(selfcontrolres) <- selfcontrolres$genes
selfcontrolres <- selfcontrolres[,-6]

selfcontrolressimp <- simpleout(selfcontrolres)

write.csv(selfcontrolres, paste0(csvsave, "mutants to self control - all results.csv"))
write.csv(selfcontrolressimp, paste0(csvsave, "mutants to self control - all results - simplified.csv"))

##### Time point comparisons to Col-0 control #####
# Col-0 ethylene comparisons
col0.eth.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "Col0.eth.1", "Col0.cont.0")),
                          contrast = c("multi", "Col0.eth.1", "Col0.cont.0"),
                          type = "ashr")

col0.eth.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "Col0.eth.4", "Col0.cont.0")),
                          contrast = c("multi", "Col0.eth.4", "Col0.cont.0"),
                          type = "ashr")

col0.eth.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "Col0.eth.24", "Col0.cont.0")),
                          contrast = c("multi", "Col0.eth.24", "Col0.cont.0"),
                          type = "ashr")
# Col-0 ACC comparisons
col0.acc.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "Col0.acc.1", "Col0.cont.0")),
                          contrast = c("multi", "Col0.acc.1", "Col0.cont.0"),
                          type = "ashr")

col0.acc.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "Col0.acc.4", "Col0.cont.0")),
                          contrast = c("multi", "Col0.acc.4", "Col0.cont.0"),
                          type = "ashr")

col0.acc.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "Col0.acc.24", "Col0.cont.0")),
                          contrast = c("multi", "Col0.acc.24", "Col0.cont.0"),
                          type = "ashr")

# etr1-3 ethylene comparisons
etr13.cont.00 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.cont.0", "Col0.cont.0")),
                          contrast = c("multi", "etr13.cont.0", "Col0.cont.0"),
                          type = "ashr")

# Gave convergence error
etr13.eth.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.eth.1", "Col0.cont.0")),
                          contrast = c("multi", "etr13.eth.1", "Col0.cont.0"),
                          type = "ashr")

etr13.eth.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.eth.4", "Col0.cont.0")),
                          contrast = c("multi", "etr13.eth.4", "Col0.cont.0"),
                          type = "ashr")

etr13.eth.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.eth.24", "Col0.cont.0")),
                          contrast = c("multi", "etr13.eth.24", "Col0.cont.0"),
                          type = "ashr")

# etr1-7 ethylene comparisons
etr17.cont.00 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.cont.0", "Col0.cont.0")),
                          contrast = c("multi", "etr17.cont.0", "Col0.cont.0"),
                          type = "ashr")

# Gave convergence error
etr17.eth.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.eth.1", "Col0.cont.0")),
                          contrast = c("multi", "etr17.eth.1", "Col0.cont.0"),
                          type = "ashr")

etr17.eth.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.eth.4", "Col0.cont.0")),
                          contrast = c("multi", "etr17.eth.4", "Col0.cont.0"),
                          type = "ashr")

etr17.eth.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.eth.24", "Col0.cont.0")),
                          contrast = c("multi", "etr17.eth.24", "Col0.cont.0"),
                          type = "ashr")

# etr1-3 ACC comparisons
etr13.acc.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.acc.1", "Col0.cont.0")),
                          contrast = c("multi", "etr13.acc.1", "Col0.cont.0"),
                          type = "ashr")

# Gave convergence error
etr13.acc.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.acc.4", "Col0.cont.0")),
                          contrast = c("multi", "etr13.acc.4", "Col0.cont.0"),
                          type = "ashr")

etr13.acc.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr13.acc.24", "Col0.cont.0")),
                          contrast = c("multi", "etr13.acc.24", "Col0.cont.0"),
                          type = "ashr")

# etr1-7 ACC comparisons
etr17.acc.01 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.acc.1", "Col0.cont.0")),
                          contrast = c("multi", "etr17.acc.1", "Col0.cont.0"),
                          type = "ashr")

etr17.acc.04 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.acc.4", "Col0.cont.0")),
                          contrast = c("multi", "etr17.acc.4", "Col0.cont.0"),
                          type = "ashr")

etr17.acc.24 <- lfcShrink(dds,
                          res = results(dds,
                                        alpha = 0.01,
                                        contrast = c("multi", "etr17.acc.24", "Col0.cont.0")),
                          contrast = c("multi", "etr17.acc.24", "Col0.cont.0"),
                          type = "ashr")

# Combine all pairwise comparison results into one dataframe
## Give columns unique names
colnames(col0.acc.01) <- paste("col0.acc.01", colnames(col0.acc.01), sep = ".")
colnames(col0.acc.04) <- paste("col0.acc.04", colnames(col0.acc.04), sep = ".")
colnames(col0.acc.24) <- paste("col0.acc.24", colnames(col0.acc.24), sep = ".")
colnames(col0.eth.01) <- paste("col0.eth.01", colnames(col0.eth.01), sep = ".")
colnames(col0.eth.04) <- paste("col0.eth.04", colnames(col0.eth.04), sep = ".")
colnames(col0.eth.24) <- paste("col0.eth.24", colnames(col0.eth.24), sep = ".")
colnames(etr13.cont.00) <- paste("etr13.cont.00", colnames(etr13.cont.00), sep = ".")
colnames(etr13.eth.01) <- paste("etr13.eth.01", colnames(etr13.eth.01), sep = ".")
colnames(etr13.eth.04) <- paste("etr13.eth.04", colnames(etr13.eth.04), sep = ".")
colnames(etr13.eth.24) <- paste("etr13.eth.24", colnames(etr13.eth.24), sep = ".")
colnames(etr17.cont.00) <- paste("etr17.cont.00", colnames(etr17.cont.00), sep = ".")
colnames(etr17.eth.01) <- paste("etr17.eth.01", colnames(etr17.eth.01), sep = ".")
colnames(etr17.eth.04) <- paste("etr17.eth.04", colnames(etr17.eth.04), sep = ".")
colnames(etr17.eth.24) <- paste("etr17.eth.24", colnames(etr17.eth.24), sep = ".")
colnames(etr13.acc.01) <- paste("etr13.acc.01", colnames(etr13.acc.01), sep = ".")
colnames(etr13.acc.04) <- paste("etr13.acc.04", colnames(etr13.acc.04), sep = ".")
colnames(etr13.acc.24) <- paste("etr13.acc.24", colnames(etr13.acc.24), sep = ".")
colnames(etr17.acc.01) <- paste("etr17.acc.01", colnames(etr17.acc.01), sep = ".")
colnames(etr17.acc.04) <- paste("etr17.acc.04", colnames(etr17.acc.04), sep = ".")
colnames(etr17.acc.24) <- paste("etr17.acc.24", colnames(etr17.acc.24), sep = ".")

## Combine by gene IDs
col0.eth.01$genes <- rownames(col0.eth.01)
col0.eth.04$genes <- rownames(col0.eth.04)
col0.eth.24$genes <- rownames(col0.eth.24)
col0.acc.01$genes <- rownames(col0.acc.01)
col0.acc.04$genes <- rownames(col0.acc.04)
col0.acc.24$genes <- rownames(col0.acc.24)
etr13.cont.00$genes <- rownames(etr13.cont.00)
etr13.eth.01$genes <- rownames(etr13.eth.01)
etr13.eth.04$genes <- rownames(etr13.eth.04)
etr13.eth.24$genes <- rownames(etr13.eth.24)
etr17.cont.00$genes <- rownames(etr17.cont.00)
etr17.eth.01$genes <- rownames(etr17.eth.01)
etr17.eth.04$genes <- rownames(etr17.eth.04)
etr17.eth.24$genes <- rownames(etr17.eth.24)
etr13.acc.01$genes <- rownames(etr13.acc.01)
etr13.acc.04$genes <- rownames(etr13.acc.04)
etr13.acc.24$genes <- rownames(etr13.acc.24)
etr17.acc.01$genes <- rownames(etr17.acc.01)
etr17.acc.04$genes <- rownames(etr17.acc.04)
etr17.acc.24$genes <- rownames(etr17.acc.24)

timepoint <- plyr::join_all(lapply(list(col0.eth.01,
                                        col0.eth.04,
                                        col0.eth.24,
                                        col0.acc.01,
                                        col0.acc.04,
                                        col0.acc.24,
                                        etr13.cont.00,
                                        etr13.eth.01,
                                        etr13.eth.04,
                                        etr13.eth.24,
                                        etr13.acc.01,
                                        etr13.acc.04,
                                        etr13.acc.24,
                                        etr17.cont.00,
                                        etr17.eth.01,
                                        etr17.eth.04,
                                        etr17.eth.24,
                                        etr17.acc.01,
                                        etr17.acc.04,
                                        etr17.acc.24), as.data.frame), by = "genes")

rownames(timepoint) <- timepoint$genes
timepoint <- timepoint[,-grep("genes", colnames(timepoint))]

timepointsig <- timepoint[which((timepoint$col0.eth.01.padj <= pcut & abs(timepoint$col0.eth.01.log2FoldChange) >= lfccut)|
                                         (timepoint$col0.eth.04.padj <= pcut & abs(timepoint$col0.eth.04.log2FoldChange) >= lfccut) |
                                         (timepoint$col0.eth.24.padj <= pcut & abs(timepoint$col0.eth.24.log2FoldChange) >= lfccut) |
                                         (timepoint$etr13.cont.00.padj <= pcut & abs(timepoint$etr13.cont.00.log2FoldChange) >= lfccut) |
                                         (timepoint$etr13.eth.01.padj <= pcut & abs(timepoint$etr13.eth.01.log2FoldChange) >= lfccut) |
                                         (timepoint$etr13.eth.04.padj <= pcut & abs(timepoint$etr13.eth.04.log2FoldChange) >= lfccut) |
                                         (timepoint$etr13.eth.24.padj <= pcut & abs(timepoint$etr13.eth.24.log2FoldChange) >= lfccut) |
                                         (timepoint$etr17.cont.00.padj <= pcut & abs(timepoint$etr17.cont.00.log2FoldChange) >= lfccut) |
                                         (timepoint$etr17.eth.01.padj <= pcut & abs(timepoint$etr17.eth.01.log2FoldChange) >= lfccut) |
                                         (timepoint$etr17.eth.04.padj <= pcut & abs(timepoint$etr17.eth.04.log2FoldChange) >= lfccut) |
                                         (timepoint$etr17.eth.24.padj <= pcut & abs(timepoint$etr17.eth.24.log2FoldChange) >= lfccut) |
                                         (timepoint$col0.acc.01.padj <= pcut & abs(timepoint$col0.acc.01.log2FoldChange) >= lfccut) |
                                         (timepoint$col0.acc.04.padj <= pcut & abs(timepoint$col0.acc.04.log2FoldChange) >= lfccut) |
                                         (timepoint$col0.acc.24.padj <= pcut & abs(timepoint$col0.acc.24.log2FoldChange) >= lfccut) |
                                         (timepoint$etr13.acc.01.padj <= pcut & abs(timepoint$etr13.acc.01.log2FoldChange) >= lfccut) |
                                         (timepoint$etr13.acc.04.padj <= pcut & abs(timepoint$etr13.acc.04.log2FoldChange) >= lfccut) |
                                         (timepoint$etr13.acc.24.padj <= pcut & abs(timepoint$etr13.acc.24.log2FoldChange) >= lfccut) |
                                         (timepoint$etr17.acc.01.padj <= pcut & abs(timepoint$etr17.acc.01.log2FoldChange) >= lfccut) |
                                         (timepoint$etr17.acc.04.padj <= pcut & abs(timepoint$etr17.acc.04.log2FoldChange) >= lfccut) |
                                         (timepoint$etr17.acc.24.padj <= pcut & abs(timepoint$etr17.acc.24.log2FoldChange) >= lfccut)),]

timepointsig <- timepointsig[which(timepointsig$col0.eth.01.baseMean > 10),]

timepointsimp <- simpleout(timepointsig)

write.csv(timepoint, paste0(csvsave, "time point comparisons - allresults.csv"))
write.csv(timepointsig, paste0(csvsave, "time point comparisons - sig results.csv"))
write.csv(timepointsimp, paste0(csvsave, "time point comparisons - sig results - simplified.csv"))

##### Density plots #####
res <- read.csv(paste0(csvsave, "time point comparisons - sig results - simplified.csv"),
                row.names = 1)
res$gene <- rownames(res)

res.eth01 <- res[which(res$col0.eth.01.padj <= pcut),c("gene","col0.eth.01.logFC")]
res.eth04 <- res[which(res$col0.eth.04.padj <= pcut),c("gene","col0.eth.04.logFC")]
res.eth24 <- res[which(res$col0.eth.24.padj <= pcut),c("gene","col0.eth.24.logFC")]
res.acc01 <- res[which(res$col0.acc.01.padj <= pcut),c("gene","col0.acc.01.logFC")]
res.acc04 <- res[which(res$col0.acc.04.padj <= pcut),c("gene","col0.acc.04.logFC")]
res.acc24 <- res[which(res$col0.acc.24.padj <= pcut),c("gene","col0.acc.24.logFC")]

res.eth01$treat <- res.eth04$treat <- res.eth24$treat <- "ethylene"
res.acc01$treat <- res.acc04$treat <- res.acc24$treat <- "ACC"

res.eth01$time <- res.acc01$time <- "1 hr"
res.eth04$time <- res.acc04$time <- "4 hr"
res.eth24$time <- res.acc24$time <- "24 hr"

colnames(res.eth01)[2] <- colnames(res.eth04)[2] <- colnames(res.eth24)[2] <- colnames(res.acc01)[2] <- colnames(res.acc04)[2] <- colnames(res.acc24)[2] <- "logFC"

res <- rbind(res.eth01, res.eth04, res.eth24,
              res.acc01, res.acc04, res.acc24)
res$time <- factor(res$time, levels = c("1 hr", "4 hr", "24 hr"))

png(paste0(pngsave, "density plot.png"), width = 600, height = 600)
ggplot(res,
       aes(x = logFC, y = ..count..)) +
  geom_vline(xintercept = 0.5, size = 1.2, linetype = "dashed") +
  geom_vline(xintercept = -0.5, size = 1.2, linetype = "dashed") +
  geom_density(size = 1.5, aes(color = treat)) +
  facet_grid(rows = vars(time)) +
  scale_color_manual(name = "Treatment", values=c("#E7B800", "#0072B2")) +
  scale_x_continuous(breaks = seq(-2.5, 2.5, 0.5),
                     labels = c("", "-2", "", "-1", "", "0",
                                "", "1", "", "2", ""),
                     limits = c(-2.5, 2.5)) +
  theme_bw(base_size = 18) +
  #xlim(-2.5, 2.5) +
  ylab("Number of transcripts")
dev.off()

##### Heatmap - Time point comparisons #####
timepointsimp <- read.csv(paste0(csvsave, "04 Time point receptor comparisons/time point comparisons - sig results - simplified.csv"),
                          row.names = 1)

timepointht <- timepointsimp[,grep("logFC", colnames(timepointsimp))]

# Add Col-0 time 0 column (all zeroes)
timepointht$col0.eth.00 <- 0
colnames(timepointht) <- gsub(".logFC", "", colnames(timepointht))
timepointht <- timepointht[,c(21, 1:20)]

ht <- Heatmap(as.matrix(timepointht),
              cluster_columns = FALSE,
              show_row_names = FALSE,
              bottom_annotation = anno,
              column_labels = rep("", 21),
              col = colfunc,
              name = "logFC",
              height = unit(8.5, "in"),
              show_heatmap_legend = FALSE)

png(paste0(pngsave, "all comparisons heatmap_resized.png"), height = 800, width = 700)
ht
dev.off()

png(paste0(pngsave, "all comparisons heatmap_dendrogram.png"), height = 300, width = 750)
plot(row_dend(ht))
dev.off()

##### Compare time profiles of ethylene & ACC #####
timepointsimp <- read.csv(paste0(csvsave, "time point comparisons - sig results - simplified.csv"),
                          row.names = 1)

# Pull out only responses to ACC and ethylene in Col-0
hormone <- timepointsimp[which((timepointsimp$col0.eth.01.padj <= pcut & abs(timepointsimp$col0.eth.01.logFC) >= lfccut) |
                                  (timepointsimp$col0.eth.04.padj <= pcut & abs(timepointsimp$col0.eth.04.logFC) >= lfccut) |
                                  (timepointsimp$col0.eth.24.padj <= pcut & abs(timepointsimp$col0.eth.24.logFC) >= lfccut) |
                                  (timepointsimp$col0.acc.01.padj <= pcut & abs(timepointsimp$col0.acc.01.logFC) >= lfccut) |
                                  (timepointsimp$col0.acc.04.padj <= pcut & abs(timepointsimp$col0.acc.04.logFC) >= lfccut) |
                                  (timepointsimp$col0.acc.24.padj <= pcut & abs(timepointsimp$col0.acc.24.logFC) >= lfccut)),
                          c("col0.eth.01.logFC", "col0.eth.01.padj",    
                            "col0.eth.04.logFC", "col0.eth.04.padj",
                            "col0.eth.24.logFC", "col0.eth.24.padj",
                            "col0.acc.01.logFC", "col0.acc.01.padj",
                            "col0.acc.04.logFC", "col0.acc.04.padj",
                            "col0.acc.24.logFC", "col0.acc.24.padj")]

colnames(hormone) <- gsub("col0.", "", colnames(hormone))

hormone$eth.max.logFC <- NA
hormone$eth.min.pval <- NA
hormone$acc.max.logFC <- NA
hormone$acc.min.pval <- NA
hormone$eth.sum <- NA
hormone$acc.sum <- NA

for (i in 1: nrow(hormone))
{
  hormone$eth.max.logFC[i] <- maxabs(hormone[i, c("eth.01.logFC", "eth.04.logFC", "eth.24.logFC")])
  hormone$eth.min.pval[i] <- min(hormone[i, c("eth.01.padj", "eth.04.padj", "eth.24.padj")])
  hormone$acc.max.logFC[i] <- maxabs(hormone[i, c("acc.01.logFC", "acc.04.logFC", "acc.24.logFC")])
  hormone$acc.min.pval[i] <- min(hormone[i, c("acc.01.padj", "acc.04.padj", "acc.24.padj")])
  
  hormone$eth.sum[i] <- upordown(hormone$eth.min.pval[i],
                                 hormone$eth.max.logFC[i],
                                 pcut = pcut,
                                 lfccut= lfccut)
  
  hormone$acc.sum[i] <- upordown(hormone$acc.min.pval[i],
                                 hormone$acc.max.logFC[i],
                                 pcut = pcut,
                                 lfccut= lfccut)
}

hormone$allsum <- paste(hormone$eth.sum, hormone$acc.sum, sep = ".")

write.csv(hormone, paste0(csvsave, "ethylene vs ACC in Col-0 - significant only - with summary columns.csv"))

table(hormone$allsum)

##### Heatmap - ethylene vs. ACC #####
hormone <- read.csv(paste0(csvsave, "03 Ethylene vs. ACC comparisons/ethylene vs ACC in Col-0 - sig results - with summary columns.csv"), row.names = 1)

png(paste0(pngsave, "ethylene vs ACC in Col-0 - main_nodendrogram.png"), width = 450, height = 700)
Heatmap(as.matrix(hormone[-which(hormone$allsum == "U.D" | hormone$allsum == "D.U"),
                          grep("[1|4].logFC", colnames(hormone))]),
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        show_row_dend = FALSE,
        row_split = factor(hormone$allsum[-which(hormone$allsum == "U.D" | hormone$allsum == "D.U")],
                           levels = c("D.D", "D.n", "n.D", "U.U", "U.n", "n.U")),
        cluster_row_slices = FALSE,
        gap = unit(5, "mm"),
        row_title = c("Down in both", "Down in ethylene", "Down in ACC",
                      "Up in both", "Up in ethylene", "Up in ACC"),
        row_title_rot = 0,
        row_title_gp = gpar(cex = txtsize),
        col = colfunc,
        bottom_annotation = anno.treat,
        column_labels = rep("", 6),
        show_heatmap_legend = FALSE,
        width = unit(4, "in")
)
dev.off()

# png(paste0(pngsave, "ethylene vs ACC in Col-0 - opposite response_nodendrogram.png"), width = 600, height = 250)
# Heatmap(as.matrix(hormone[which(hormone$allsum == "U.D" | hormone$allsum == "D.U"),
#                           grep("[1|4].logFC", colnames(hormone))]),
#         name = "logFC",
#         cluster_columns = FALSE,
#         show_row_names = FALSE,
#         row_split = factor(hormone$allsum[which(hormone$allsum == "U.D" | hormone$allsum == "D.U")],
#                            levels = c("D.U", "U.D")),
#         cluster_row_slices = FALSE,
#         gap = unit(3, "mm"),
#         row_title = c("Down in ethylene, \n Up in ACC", "Up in ethylene, \n Down in ACC"),
#         row_title_rot = 0,
#         row_title_gp = gpar(cex = txtsize),
#         col = colfunc,
#         bottom_annotation = anno.treat,
#         column_labels = rep("", 6),
#         show_row_dend = FALSE,
#         show_heatmap_legend =  FALSE
# )
# dev.off()

# Make a heatmap of both up and down groups separately
# Order dendrograms by highest max abs logFC
for(i in 1:nrow(hormone))
{
  hormone$maxabs[i] <- maxabs(hormone[i, c(1, 3, 5, 7, 9, 11)])
}

bothup <- which(hormone$allsum == "U.U")
png(paste0(pngsave, "ethylene vs ACC in Col-0 - all up_nodendrogram.png"), width = 301, height = 500)
Heatmap(as.matrix(hormone[bothup,
                          grep("[1|4].logFC", colnames(hormone))]),
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        row_dend_reorder = rank(-hormone$maxabs)[bothup],
        col = colfunc,
        bottom_annotation = anno.treat,
        column_labels = rep("", 6),
        show_row_dend = FALSE,
        show_heatmap_legend =  FALSE,
        width = unit(4, "in")
)
dev.off()

bothdown <- which(hormone$allsum == "D.D")
png(paste0(pngsave, "ethylene vs ACC in Col-0 - all down_nodendrogram.png"), width = 301, height = 500)
Heatmap(as.matrix(hormone[bothdown,
                          grep("[1|4].logFC", colnames(hormone))]),
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        row_dend_reorder = rank(hormone$maxabs)[bothdown],
        col = colfunc,
        bottom_annotation = anno.treat,
        column_labels = rep("", 6),
        show_row_dend = FALSE,
        show_heatmap_legend =  FALSE,
        width = unit(4, "in")
)
dev.off()

##### Receptor dependence #####
receptor <- read.csv(paste0(csvsave, "time point comparisons - sig results - simplified.csv"),
                          row.names = 1)

# I will use the etr1-3 and etr1-7 results compared back to their own time 0 to determine if the treatments change the expression from the baseline
selfcontrolressimp <- read.csv(paste0(csvsave, "mutants to self control - all results - simplified.csv"),
                     row.names = 1)
selfcontrolressimp <- selfcontrolressimp[rownames(receptor),]

for (i in 1: nrow(receptor))
{
  receptor$col0.eth.max.logFC[i] <- maxabs(receptor[i, grep("col0.eth.[0|2][1|4].logFC", colnames(receptor))])
  receptor$col0.eth.min.pval[i] <- min(receptor[i, grep("col0.eth.[0|2][1|4].padj", colnames(receptor))])
  receptor$col0.acc.max.logFC[i] <- maxabs(receptor[i, grep("col0.acc.[0|2][1|4].logFC", colnames(receptor))])
  receptor$col0.acc.min.pval[i] <- min(receptor[i, grep("col0.acc.[0|2][1|4].padj", colnames(receptor))])
  receptor$etr13.eth.max.logFC[i] <- maxabs(receptor[i, grep("etr13.eth.[0|2][1|4].logFC", colnames(receptor))])
  receptor$etr13.eth.min.pval[i] <- min(receptor[i, grep("etr13.eth.[0|2][1|4].padj", colnames(receptor))])
  receptor$etr13.acc.max.logFC[i] <- maxabs(receptor[i, grep("etr13.acc.[0|2][1|4].logFC", colnames(receptor))])
  receptor$etr13.acc.min.pval[i] <- min(receptor[i, grep("etr13.acc.[0|2][1|4].padj", colnames(receptor))])
  receptor$etr17.eth.max.logFC[i] <- maxabs(receptor[i, grep("etr17.eth.[0|2][1|4].logFC", colnames(receptor))])
  receptor$etr17.eth.min.pval[i] <- min(receptor[i, grep("etr17.eth.[0|2][1|4].padj", colnames(receptor))])
  receptor$etr17.acc.max.logFC[i] <- maxabs(receptor[i, grep("etr17.acc.[0|2][1|4].logFC", colnames(receptor))])
  receptor$etr17.acc.min.pval[i] <- min(receptor[i, grep("etr17.acc.[0|2][1|4].padj", colnames(receptor))])
  receptor$etr13.self.eth.max.logFC[i] <- maxabs(selfcontrolressimp[i, grep("etr13.eth.[0|2][1|4].logFC", colnames(selfcontrolressimp))])
  receptor$etr13.self.eth.min.pval[i] <- min(selfcontrolressimp[i, grep("etr13.eth.[0|2][1|4].padj", colnames(selfcontrolressimp))])
  receptor$etr13.self.acc.max.logFC[i] <- maxabs(selfcontrolressimp[i, grep("etr13.acc.[0|2][1|4].logFC", colnames(selfcontrolressimp))])
  receptor$etr13.self.acc.min.pval[i] <- min(selfcontrolressimp[i, grep("etr13.acc.[0|2][1|4].padj", colnames(selfcontrolressimp))])
  receptor$etr17.self.eth.max.logFC[i] <- maxabs(selfcontrolressimp[i, grep("etr17.eth.[0|2][1|4].logFC", colnames(selfcontrolressimp))])
  receptor$etr17.self.eth.min.pval[i] <- min(selfcontrolressimp[i, grep("etr17.eth.[0|2][1|4].padj", colnames(selfcontrolressimp))])
  receptor$etr17.self.acc.max.logFC[i] <- maxabs(selfcontrolressimp[i, grep("etr17.acc.[0|2][1|4].logFC", colnames(selfcontrolressimp))])
  receptor$etr17.self.acc.min.pval[i] <- min(selfcontrolressimp[i, grep("etr17.acc.[0|2][1|4].padj", colnames(selfcontrolressimp))])

  receptor$col0.eth.sum[i] <- upordown(receptor$col0.eth.min.pval[i],
                                     receptor$col0.eth.max.logFC[i],
                                     pcut = pcut,
                                     lfccut = lfccut)
  receptor$col0.acc.sum[i] <- upordown(receptor$col0.acc.min.pval[i],
                                     receptor$col0.acc.max.logFC[i],
                                     pcut = pcut,
                                     lfccut = lfccut)
  receptor$etr13.cont.sum[i] <- upordown(receptor$etr13.cont.00.padj[i],
                                       receptor$etr13.cont.00.logFC[i],
                                       pcut = pcut,
                                       lfccut = lfccut)
  receptor$etr13.eth.sum[i] <- upordown(receptor$etr13.eth.min.pval[i],
                                      receptor$etr13.eth.max.logFC[i],
                                      pcut = pcut,
                                      lfccut = lfccut)
  receptor$etr13.acc.sum[i] <- upordown(receptor$etr13.acc.min.pval[i],
                                      receptor$etr13.acc.max.logFC[i],
                                      pcut = pcut,
                                      lfccut = lfccut)
  receptor$etr17.cont.sum[i] <- upordown(receptor$etr17.cont.00.padj[i],
                                       receptor$etr17.cont.00.logFC[i],
                                       pcut = pcut,
                                       lfccut = lfccut)
  receptor$etr17.eth.sum[i] <- upordown(receptor$etr17.eth.min.pval[i],
                                      receptor$etr17.eth.max.logFC[i],
                                      pcut = pcut,
                                      lfccut = lfccut)
  receptor$etr17.acc.sum[i] <- upordown(receptor$etr17.acc.min.pval[i],
                                      receptor$etr17.acc.max.logFC[i],
                                      pcut = pcut,
                                      lfccut = lfccut)
  receptor$etr13.self.eth.sum[i] <- upordown(receptor$etr13.self.eth.min.pval[i],
                                             receptor$etr13.self.eth.max.logFC[i],
                                             pcut = pcut,
                                             lfccut = lfccut)
  receptor$etr13.self.acc.sum[i] <- upordown(receptor$etr13.self.acc.min.pval[i],
                                             receptor$etr13.self.acc.max.logFC[i],
                                             pcut = pcut,
                                             lfccut = lfccut)
  receptor$etr17.self.eth.sum[i] <- upordown(receptor$etr17.self.eth.min.pval[i],
                                            receptor$etr17.self.eth.max.logFC[i],
                                            pcut = pcut,
                                            lfccut = lfccut)
  receptor$etr17.self.acc.sum[i] <- upordown(receptor$etr17.self.acc.min.pval[i],
                                            receptor$etr17.self.acc.max.logFC[i],
                                            pcut = pcut,
                                            lfccut = lfccut)
  
}

# Pull out genes which respond to ethylene in a receptor-dependent way
receptor$ethrecepdep <- "no"
receptor$ethrecepdep[which(receptor$col0.eth.sum != "n" &
                           receptor$etr13.self.eth.sum == "n" &
                           receptor$etr17.self.eth.sum == "n")] <- "YES"

# Pull out genes which respond to ACC in a receptor-dependent way
receptor$accrecepdep <- "no"
receptor$accrecepdep[which(receptor$col0.acc.sum != "n" &
                           receptor$etr13.self.acc.sum == "n" &
                           receptor$etr17.self.acc.sum == "n")] <- "YES"

# Pull out genes which respond to ethylene in a receptor-independent way
receptor$ethrecepind <- "no"
receptor$ethrecepind[which(receptor$col0.eth.sum != "n" &
                           receptor$etr13.self.eth.sum != "n" &
                           receptor$etr17.self.eth.sum != "n")] <- "YES"

# Pull out genes which respond to ACC in a receptor-independent way
receptor$accrecepind <- "no"
receptor$accrecepind[which(receptor$col0.acc.sum != "n" &
                             receptor$etr13.self.acc.sum != "n" &
                             receptor$etr17.self.acc.sum != "n")] <- "YES"

# # Pull out genes which respond to ethylene in etr1-7 but not etr1-3
# receptor$ethetr17resp <- "no"
# receptor$ethetr17resp[which(receptor$col0.eth.sum != "n" &
#                            receptor$etr13.cont.sum == "n" &
#                            receptor$etr13.eth.sum == "n" &
#                            receptor$etr17.cont.sum != "n" &
#                            receptor$etr17.eth.sum != "n" &
#                            receptor$etr17.eth.delta.sum != "n")] <- "YES"
# 
# # Pull out genes which respond to ACC in etr1-7 but not etr1-3
# receptor$accetr17resp <- "no"
# receptor$accetr17resp[which(receptor$col0.acc.sum != "n" &
#                            receptor$etr13.cont.sum == "n" &
#                            receptor$etr13.acc.sum == "n" &
#                            receptor$etr17.cont.sum != "n" &
#                            receptor$etr17.acc.sum != "n" &
#                            receptor$etr17.acc.delta.sum != "n")] <- "YES"
# 
# receptor$allsum <- paste(receptor$col0.acc.sum,
#                          receptor$col0.eth.sum,
#                          receptor$etr13.acc.sum,
#                          receptor$etr13.eth.sum,
#                          receptor$etr17.acc.sum,
#                          receptor$etr17.eth.sum,
#                          receptor$etr17.acc.delta.sum,
#                          receptor$etr17.eth.delta.sum)

# Remove maxabs and min p-value columns that are no longer needed
receptor <- receptor[,-c(grep("max", colnames(receptor)), grep("min", colnames(receptor)))]

write.csv(receptor, paste0(csvsave, "time point comparisons - sig results - simplified - with receptor dependency columns.csv"))

##### Heatmap - Receptor dependence #####
receptor <- read.csv(paste0(csvsave, "time point comparisons - sig results - simplified - with receptor dependency columns.csv"),
                     row.names = 1)

receptorht <- receptor[,-c(grep("padj", colnames(receptor)))]

# Add Col-0 time 0 column (all zeroes)
receptorht$col0.cont.00.logFC <- 0
receptorht <- receptorht[,c(ncol(receptorht), 1:(ncol(receptorht)-1))]

# Make a heatmap of all receptor-dependent genes
dep <- which(receptorht$ethrecepdep == "YES" | receptorht$accrecepdep == "YES")
png(paste0(pngsave, "recep depend - no split.png"), width = 750, height = 600)
Heatmap(as.matrix(receptorht[dep,
                         grep("[0,1,4].logFC", colnames(receptorht))]),
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        column_labels = as.character(rep("", 21)),
        column_title = "Receptor-dependent responses",
        column_title_gp = gpar(cex = txtsize),
        bottom_annotation = anno,
        col = colfunc
        )
dev.off()

png(paste0(pngsave, "recep depend - split.png"), width = 800, height = 600)
draw(Heatmap(as.matrix(receptorht[dep,
                         grep("[0,1,4].logFC", colnames(receptorht))]),
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        column_labels = as.character(rep("", 21)),
        split = factor(paste(receptorht$ethrecepdep[dep],
                             receptorht$accrecepdep[dep]),
                       levels = c("YES YES", "YES no", "no YES")),
        row_title = c("Both", "Ethylene", "ACC"),
        cluster_row_slices = FALSE,
        row_title_rot = 0,
        row_title_gp = gpar(cex = txtsize),
        column_title = "Receptor-dependent responses",
        column_title_gp = gpar(cex = txtsize),
        bottom_annotation = anno,
        col = colfunc
),
row_title = "Treatment with Receptor-dependent response",
row_title_gp = gpar(cex = txtsize))
dev.off()

# Make a heatmap of all receptor-independent genes
ind <- which(receptorht$ethrecepind == "YES" | receptorht$accrecepind == "YES")
png(paste0(pngsave, "recep independ - no split.png"), width = 750, height = 600)
Heatmap(as.matrix(receptorht[ind,
                             grep("[0,1,4].logFC", colnames(receptorht))]),
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        column_labels = as.character(rep("", 21)),
        column_title = "Receptor-independent responses",
        column_title_gp = gpar(cex = txtsize),
        bottom_annotation = anno,
        col = colfunc
)
dev.off()

png(paste0(pngsave, "recep independ - split.png"), width = 800, height = 600)
draw(Heatmap(as.matrix(receptorht[ind,
                              grep("[0,1,4].logFC", colnames(receptorht))]),
             name = "logFC",
             cluster_columns = FALSE,
             show_row_names = FALSE,
             column_labels = as.character(rep("", 21)),
             split = factor(paste(receptorht$ethrecepind[ind],
                                  receptorht$accrecepind[ind]),
                            levels = c("YES YES", "YES no", "no YES")),
             gap = unit(5, "mm"),
             row_title = c("Both", "Ethylene", "ACC"),
             row_title_rot = 0,
             row_title_gp = gpar(cex = txtsize),
             cluster_row_slices = FALSE,
             cluster_column_slices = FALSE,
             column_title = "Receptor-independent responses",
             column_title_gp = gpar(cex = txtsize),
             bottom_annotation = anno,
             col = colfunc
),
row_title = "Treatment with receptor-independent response",
row_title_gp = gpar(cex = txtsize))
dev.off()

# Make a heatmap of all genes that meet none of the above criteria
receptorht$nonstatusCol0 <- "n"
receptorht$nonstatusCol0[which((receptorht$col0.eth.sum != "n" | receptorht$col0.acc.sum != "n"))] <- "Y"
receptorht$nonstatusetr13 <- "n"
receptorht$nonstatusetr13[which((receptorht$etr13.cont.sum != "n" | receptorht$etr13.eth.sum != "n" | receptorht$etr13.acc.sum != "n"))] <- "Y"
receptorht$nonstatusetr17 <- "n"
receptorht$nonstatusetr17[which((receptorht$etr17.cont.sum != "n" | receptorht$etr17.eth.sum != "n" | receptorht$etr17.acc.sum != "n"))] <- "Y"
receptorht$nonstatussum <- paste(receptorht$nonstatusCol0, receptorht$nonstatusetr13, receptorht$nonstatusetr17, sep = "")

non <- which(receptorht$ethrecepdep == "no" &
               receptorht$ethrecepind == "no" &
               receptorht$accrecepdep == "no" &
               receptorht$accrecepind == "no")

write.csv(receptorht[non,], paste0(csvsave, "time point comparisons - sig results - simplified - complex only with status.csv"))

png(paste0(pngsave, "recep - complex.png"), width = 800, height = 600)
Heatmap(as.matrix(receptorht[non,
                         grep("[0,1,4].logFC", colnames(receptorht))]),
        name = "logFC",
        cluster_columns = FALSE,
        show_row_names = FALSE,
        split = factor(receptorht$nonstatussum[non],
                       levels = c("Ynn", "nYn", "nnY", "YYn", "YnY", "nYY", "YYY")),
        gap = unit(5, "mm"),
        column_title = "Complex genes",
        column_title_gp = gpar(cex = txtsize),
        row_title_rot = 0,
        cluster_row_slices = FALSE,
        row_title = c("Col-0 only", "etr1-3 only", "etr1-7 only",
                      "Col-0 & etr1-3", "Col-0 & etr1-7", "etr1-3 & etr1-7", "All"),
        row_title_gp = gpar(cex = txtsize),
        bottom_annotation = anno,
        column_labels = as.character(rep("", 21)),
        col = colfunc
)
dev.off()

##### Summary numbers - receptor dependence
receptor$recepsum <- paste(receptor$ethrecepdep, receptor$accrecepdep,
                           receptor$ethrecepind, receptor$accrecepind)
table(receptor$recepsum)
table(receptorht$nonstatussum[non])

nonreceptor <- receptorht[non,]
table(nonreceptor$nonstatussum[-which(lengths(regmatches(nonreceptor$allsum, gregexpr("n", nonreceptor$allsum))) >= 6)])

length(which(lengths(regmatches(receptorht$allsum[non], gregexpr("n", receptorht$allsum[non]))) > 1))

